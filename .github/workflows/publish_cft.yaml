name: Publish rdklib CFT

on:
  push:
    branches:
      - "master"
  workflow_dispatch:

env:
  samBucketPrefix: "aws-sam-cli-rdklib-build-bucket-"

jobs:
  samDeploy:
    environment: prod
    strategy:
      matrix:
        region:
          - "us-east-1"
          - "us-east-2"
          - "us-west-1"
          - "us-west-2"
          - "ap-south-1"
          - "ap-northeast-3"
          - "ap-northeast-2"
          - "ap-southeast-1"
          - "ap-southeast-2"
          - "ap-northeast-1"
          - "ca-central-1"
          - "eu-central-1"
          - "eu-west-1"
          - "eu-west-2"
          - "eu-west-3"
          - "eu-north-1"
          - "sa-east-1"
    name: SAM Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: aws-actions/setup-sam@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::711761543063:role/github-automation-role-update-layers
          aws-region: ${{ matrix.region }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Pre-package steps
        run: |
          poetry self add poetry-plugin-export
          poetry export -f requirements.txt --output requirements.txt
          pip install -r requirements.txt -t build/python
          mkdir build/lib
          cp -r rdklib build/lib/rdklib
          cp -r rdklib build/python/rdklib
          cp -r rdklibtest build/lib/rdklibtest
          cp -r rdklibtest build/python/rdklibtest
          # Boto bloats the layer without any performance improvement, as Lambda will already have it
          # https://gist.github.com/gene1wood/4a052f39490fae00e0c3
          rm -r build/python/botocore
          rm -r build/python/boto3
          rm -r build/python/botocore-*.dist-info
          rm -r build/python/boto3-*.dist-info
          rm build/lib/rdklib/util/internal.py # Remove an internal python file that only causes trouble
          rm build/python/rdklib/util/internal.py # Remove an internal python file that only causes trouble
          
      - run: sam build --use-container
      - run: sam package --s3-bucket "${{ env.samBucketPrefix }}${{ matrix.region }}" --output-template-file packaged.yaml
      - run: sam deploy --no-confirm-changeset --no-fail-on-empty-changeset --s3-bucket "${{ env.samBucketPrefix }}${{ matrix.region }}" --template-file packaged.yaml --stack-name rdklib-layer-sam --capabilities CAPABILITY_IAM --region ${{ matrix.region }}
      - run: |
          LATEST_LAYER_VER=$(aws lambda list-layer-versions --region ${{ matrix.region }} --layer-name rdklib-layer --max-items 1 | jq -r ".LayerVersions[].Version")
          aws lambda add-layer-version-permission --region ${{ matrix.region }} --layer-name rdklib-layer --version-number $LATEST_LAYER_VER --statement-id public --action "lambda:GetLayerVersion" --principal "*"
  # Commenting this out because the action always fails
  # rdkIssue:
  #   environment: prod
  #   name: Create RDK Issue
  #   runs-on: ubuntu-latest
  #   # These permissions are needed to interact with GitHub's OIDC Token endpoint.
  #   permissions:
  #     id-token: write
  #     contents: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - uses: actions-ecosystem/action-get-latest-tag@v1
  #       id: get-latest-tag
  #       with:
  #         semver_only: true
  #     - name: Create new issue in aws-config-rdk notifying of new layer version
  #       uses: dacbd/create-issue-action@main
  #       with:
  #         token: ${{ github.token }}
  #         title: RDKLIB Version ${{ steps.get-latest-tag.outputs.tag }} Available
  #         body: A new tag has been released in rdklib, and RDK should be updated to use the latest layer
